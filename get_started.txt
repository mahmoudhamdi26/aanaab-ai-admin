   cd /home/mhamdi/code/designpeer/aanaab-ai/admin
   ```

2. **Run the setup script:**
   ```bash
   ./setup.sh
   ```

3. **Create an admin user:**
   ```bash
   npm run create-admin admin@example.com admin123 "Admin User"
   ```

4. **Start the development server:**
   ```bash
   npm run dev
   ```

5. **Access the admin panel:**
   - URL: `http://localhost:3001`
   - Login with the credentials you created

### 📁 **Project Structure:**
```
admin/
├── src/
│   ├── app/                    # Next.js app router
│   │   ├── api/               # API routes
│   │   ├── auth/              # Authentication pages
│   │   └── page.tsx           # Main dashboard
│   ├── components/            # React components
│   │   ├── ui/                # Reusable UI components
│   │   ├── config-panels/     # Configuration panels
│   │   └── admin-dashboard.tsx
│   ├── lib/                   # Utilities and configurations
│   ├── types/                 # TypeScript definitions
│   └── hooks/                 # Custom React hooks
├── prisma/                    # Database schema
├── scripts/                   # Utility scripts
└── README.md                  # Documentation
```

### 🔧 **Key Configuration Sections:**

1. **System Settings**: Environment, debug mode, API configuration
2. **LLM Providers**: Multiple language model support with API keys
3. **Embedding Models**: Vector embedding configuration
4. **LiveKit**: Real-time communication settings
5. **RAG Systems**: Both normal and LangGraph RAG configuration
6. **Sync Process**: Content synchronization with batch settings
7. **Database**: AI and LMS database connections
8. **Security**: Authentication, CORS, and API security

### 🔒 **Security Features:**
- Secure authentication with NextAuth.js
- Password hashing with bcrypt
- Role-based access control
- API key protection
- CORS configuration
- Audit logging for all changes

### 📈 **Monitoring & Management:**
- Real-time sync job status
- Configuration change history
- System health monitoring
- Progress tracking for sync operations

The admin panel is designed to work seamlessly with your existing Aanaab AI service, allowing you to manage all configuration settings through a user-friendly interface without modifying the core service code. All changes are stored in the database and can be retrieved by the main service when needed.

The implementation follows your requirements to not change the current working cycle and instead inject settings from the database using the defaults you're already using in the project.



   ./setup.

      npm run create-admin admin@example.com admin123 "Admin User"

         npm run dev